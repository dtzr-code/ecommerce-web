{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  items: []\n};\nexport const cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart: (state, action) => {\n      //must spread the state.items like 'copying' the intiial state of the items and adding on to it\n      //the payload contains the item that we want to add\n      // state.items = [...state.items, action.payload];\n      const item = state.items.find(item => item.name === action.payload.name);\n\n      if (item) {\n        item.quantity += action.payload.quantity;\n      } else {\n        state.items;\n        state.items.push(action.payload);\n      }\n    },\n    removeFromCart: (state, action) => {\n      const index = state.items.findIndex(cartItem => cartItem.id === action.payload.id);\n      let newCart = [...state.items];\n\n      if (index >= 0) {\n        //If the item exists in the basket remove it\n        newCart.splice(index, 1);\n      } else {\n        console.warn(`Can't remove from product (id:${action.payload.id}) as its not found in the cart`);\n      }\n\n      state.items = newCart;\n    },\n    clearCart: state => {\n      state.items = [];\n    }\n  }\n});\nexport const {\n  addToCart,\n  removeFromCart,\n  clearCart\n} = cartSlice.actions;\nexport const selectItems = state => state.cart.items;\nexport const selectTotal = state => state.cart.items.reduce((total, item) => total + item.price, 0);\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/Users/dtzr/Documents/GitHub/ecommerce-web/src/slices/cartSlice.js"],"names":["createSlice","initialState","items","cartSlice","name","reducers","addToCart","state","action","item","find","payload","quantity","push","removeFromCart","index","findIndex","cartItem","id","newCart","splice","console","warn","clearCart","actions","selectItems","cart","selectTotal","reduce","total","price","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE;AADY,CAArB;AAIA,OAAO,MAAMC,SAAS,GAAGH,WAAW,CAAC;AACnCI,EAAAA,IAAI,EAAE,MAD6B;AAEnCH,EAAAA,YAFmC;AAGnCI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC5B;AACA;AACA;AAEA,YAAMC,IAAI,GAAGF,KAAK,CAACL,KAAN,CAAYQ,IAAZ,CAAkBD,IAAD,IAAUA,IAAI,CAACL,IAAL,KAAcI,MAAM,CAACG,OAAP,CAAeP,IAAxD,CAAb;;AAEA,UAAIK,IAAJ,EAAU;AACRA,QAAAA,IAAI,CAACG,QAAL,IAAiBJ,MAAM,CAACG,OAAP,CAAeC,QAAhC;AACD,OAFD,MAEO;AACLL,QAAAA,KAAK,CAACL,KAAN;AACAK,QAAAA,KAAK,CAACL,KAAN,CAAYW,IAAZ,CAAiBL,MAAM,CAACG,OAAxB;AACD;AACF,KAdO;AAgBRG,IAAAA,cAAc,EAAE,CAACP,KAAD,EAAQC,MAAR,KAAmB;AACjC,YAAMO,KAAK,GAAGR,KAAK,CAACL,KAAN,CAAYc,SAAZ,CACXC,QAAD,IAAcA,QAAQ,CAACC,EAAT,KAAgBV,MAAM,CAACG,OAAP,CAAeO,EADjC,CAAd;AAIA,UAAIC,OAAO,GAAG,CAAC,GAAGZ,KAAK,CAACL,KAAV,CAAd;;AAEA,UAAIa,KAAK,IAAI,CAAb,EAAgB;AACd;AACAI,QAAAA,OAAO,CAACC,MAAR,CAAeL,KAAf,EAAsB,CAAtB;AACD,OAHD,MAGO;AACLM,QAAAA,OAAO,CAACC,IAAR,CACG,iCAAgCd,MAAM,CAACG,OAAP,CAAeO,EAAG,gCADrD;AAGD;;AAEDX,MAAAA,KAAK,CAACL,KAAN,GAAciB,OAAd;AACD,KAjCO;AAmCRI,IAAAA,SAAS,EAAGhB,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACL,KAAN,GAAc,EAAd;AACD;AArCO;AAHyB,CAAD,CAA7B;AA4CP,OAAO,MAAM;AAAEI,EAAAA,SAAF;AAAaQ,EAAAA,cAAb;AAA6BS,EAAAA;AAA7B,IAA2CpB,SAAS,CAACqB,OAA3D;AAEP,OAAO,MAAMC,WAAW,GAAIlB,KAAD,IAAWA,KAAK,CAACmB,IAAN,CAAWxB,KAA1C;AACP,OAAO,MAAMyB,WAAW,GAAIpB,KAAD,IACzBA,KAAK,CAACmB,IAAN,CAAWxB,KAAX,CAAiB0B,MAAjB,CAAwB,CAACC,KAAD,EAAQpB,IAAR,KAAiBoB,KAAK,GAAGpB,IAAI,CAACqB,KAAtD,EAA6D,CAA7D,CADK;AAGP,eAAe3B,SAAS,CAAC4B,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  items: [],\n};\n\nexport const cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart: (state, action) => {\n      //must spread the state.items like 'copying' the intiial state of the items and adding on to it\n      //the payload contains the item that we want to add\n      // state.items = [...state.items, action.payload];\n\n      const item = state.items.find((item) => item.name === action.payload.name);\n\n      if (item) {\n        item.quantity += action.payload.quantity;\n      } else {\n        state.items\n        state.items.push(action.payload);\n      }\n    },\n\n    removeFromCart: (state, action) => {\n      const index = state.items.findIndex(\n        (cartItem) => cartItem.id === action.payload.id\n      );\n\n      let newCart = [...state.items];\n\n      if (index >= 0) {\n        //If the item exists in the basket remove it\n        newCart.splice(index, 1);\n      } else {\n        console.warn(\n          `Can't remove from product (id:${action.payload.id}) as its not found in the cart`\n        );\n      }\n\n      state.items = newCart;\n    },\n\n    clearCart: (state) => {\n      state.items = []\n    }\n  },\n});\n\nexport const { addToCart, removeFromCart, clearCart } = cartSlice.actions;\n\nexport const selectItems = (state) => state.cart.items;\nexport const selectTotal = (state) =>\n  state.cart.items.reduce((total, item) => total + item.price, 0);\n\nexport default cartSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}