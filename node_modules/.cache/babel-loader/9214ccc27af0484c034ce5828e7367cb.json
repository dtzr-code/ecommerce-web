{"ast":null,"code":"var _jsxFileName = \"/Users/dtzr/Documents/GitHub/ecommerce-web/src/components/Checkout(Stripe)/Checkout.js\",\n    _s = $RefreshSig$();\n\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stripePromise = loadStripe(`${process.env.STRIPE_PUBLIC_KEY}`);\nconsole.log(process.envSTRIPE_PUBLIC_KEY);\n\nconst Checkout = () => {\n  _s();\n\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async event => {\n    // Block native form submission.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    } // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n\n\n    const cardElement = elements.getElement(CardElement); // Use your card Element with other Stripe.js APIs\n\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: \"card\",\n      card: cardElement\n    });\n\n    if (error) {\n      console.log(\"[error]\", error);\n    } else {\n      console.log(\"[PaymentMethod]\", paymentMethod);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(CardElement, {\n      options: {\n        style: {\n          base: {\n            fontSize: \"16px\",\n            color: \"#424770\",\n            \"::placeholder\": {\n              color: \"#aab7c4\"\n            }\n          },\n          invalid: {\n            color: \"#9e2146\"\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      disabled: !stripe,\n      children: \"Pay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Checkout, \"EKvoGMX7lxsZ5SGPpYu2aKFzClQ=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["/Users/dtzr/Documents/GitHub/ecommerce-web/src/components/Checkout(Stripe)/Checkout.js"],"names":["CardElement","useStripe","useElements","loadStripe","stripePromise","process","env","STRIPE_PUBLIC_KEY","console","log","envSTRIPE_PUBLIC_KEY","Checkout","stripe","elements","handleSubmit","event","preventDefault","cardElement","getElement","error","paymentMethod","createPaymentMethod","type","card","style","base","fontSize","color","invalid"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,WAAjC,QAAoD,yBAApD;AACA,SAASC,UAAT,QAA2B,mBAA3B;;AAEA,MAAMC,aAAa,GAAGD,UAAU,CAAE,GAAEE,OAAO,CAACC,GAAR,CAAYC,iBAAkB,EAAlC,CAAhC;AACAC,OAAO,CAACC,GAAR,CAAYJ,OAAO,CAACK,oBAApB;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAMC,MAAM,GAAGX,SAAS,EAAxB;AACA,QAAMY,QAAQ,GAAGX,WAAW,EAA5B;;AAEA,QAAMY,YAAY,GAAG,MAAOC,KAAP,IAAiB;AACpC;AACAA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAI,CAACJ,MAAD,IAAW,CAACC,QAAhB,EAA0B;AACxB;AACA;AACA;AACD,KARmC,CAUpC;AACA;AACA;;;AACA,UAAMI,WAAW,GAAGJ,QAAQ,CAACK,UAAT,CAAoBlB,WAApB,CAApB,CAboC,CAepC;;AACA,UAAM;AAAEmB,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAA2B,MAAMR,MAAM,CAACS,mBAAP,CAA2B;AAChEC,MAAAA,IAAI,EAAE,MAD0D;AAEhEC,MAAAA,IAAI,EAAEN;AAF0D,KAA3B,CAAvC;;AAKA,QAAIE,KAAJ,EAAW;AACTX,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBU,KAAvB;AACD,KAFD,MAEO;AACLX,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BW,aAA/B;AACD;AACF,GA1BD;;AA4BA,sBACE;AAAM,IAAA,QAAQ,EAAEN,YAAhB;AAAA,4BACE,QAAC,WAAD;AACE,MAAA,OAAO,EAAE;AACPU,QAAAA,KAAK,EAAE;AACLC,UAAAA,IAAI,EAAE;AACJC,YAAAA,QAAQ,EAAE,MADN;AAEJC,YAAAA,KAAK,EAAE,SAFH;AAGJ,6BAAiB;AACfA,cAAAA,KAAK,EAAE;AADQ;AAHb,WADD;AAQLC,UAAAA,OAAO,EAAE;AACPD,YAAAA,KAAK,EAAE;AADA;AARJ;AADA;AADX;AAAA;AAAA;AAAA;AAAA,YADF,eAiBE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,QAAQ,EAAE,CAACf,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD,CAvDD;;GAAMD,Q;UACWV,S,EACEC,W;;;KAFbS,Q;AAyDN,eAAeA,QAAf","sourcesContent":["import { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { loadStripe } from \"@stripe/stripe-js\";\n\nconst stripePromise = loadStripe(`${process.env.STRIPE_PUBLIC_KEY}`)\nconsole.log(process.envSTRIPE_PUBLIC_KEY)\n\nconst Checkout = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async (event) => {\n    // Block native form submission.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    }\n\n    // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n    const cardElement = elements.getElement(CardElement);\n\n    // Use your card Element with other Stripe.js APIs\n    const { error, paymentMethod } = await stripe.createPaymentMethod({\n      type: \"card\",\n      card: cardElement,\n    });\n\n    if (error) {\n      console.log(\"[error]\", error);\n    } else {\n      console.log(\"[PaymentMethod]\", paymentMethod);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <CardElement\n        options={{\n          style: {\n            base: {\n              fontSize: \"16px\",\n              color: \"#424770\",\n              \"::placeholder\": {\n                color: \"#aab7c4\",\n              },\n            },\n            invalid: {\n              color: \"#9e2146\",\n            },\n          },\n        }}\n      />\n      <button type=\"submit\" disabled={!stripe}>\n        Pay\n      </button>\n    </form>\n  );\n};\n\nexport default Checkout"]},"metadata":{},"sourceType":"module"}