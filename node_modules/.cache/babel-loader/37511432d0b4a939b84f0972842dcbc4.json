{"ast":null,"code":"var _jsxFileName = \"/Users/dtzr/Documents/GitHub/ecommerce-web/src/components/Checkout(Stripe)/Checkout.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst [succeeded, setSucceeded] = useState(false);\nconst [error, setError] = useState(null);\nconst [processing, setProcessing] = useState(\"\");\nconst [disabled, setDisabled] = useState(true);\nconst [clientSecret, setClientSecret] = useState(\"\");\nconst stripe = useStripe();\nconst elements = useElements();\nuseEffect(() => {\n  // Create PaymentIntent as soon as the page loads\n  window.fetch(\"/create-payment-intent\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      items: [{\n        id: \"xl-tshirt\"\n      }]\n    })\n  }).then(res => {\n    return res.json();\n  }).then(data => {\n    setClientSecret(data.clientSecret);\n  });\n}, []);\nconst cardStyle = {\n  style: {\n    base: {\n      color: \"#32325d\",\n      fontFamily: \"Arial, sans-serif\",\n      fontSmoothing: \"antialiased\",\n      fontSize: \"16px\",\n      \"::placeholder\": {\n        color: \"#32325d\"\n      }\n    },\n    invalid: {\n      color: \"#fa755a\",\n      iconColor: \"#fa755a\"\n    }\n  }\n};\n\nconst handleChange = async event => {\n  // Listen for changes in the CardElement\n  // and display any errors as the customer types their card details\n  setDisabled(event.empty);\n  setError(event.error ? event.error.message : \"\");\n};\n\nconst handleSubmit = async ev => {\n  ev.preventDefault();\n  setProcessing(true);\n  const payload = await stripe.confirmCardPayment(clientSecret, {\n    payment_method: {\n      card: elements.getElement(CardElement)\n    }\n  });\n\n  if (payload.error) {\n    setError(`Payment failed ${payload.error.message}`);\n    setProcessing(false);\n  } else {\n    setError(null);\n    setProcessing(false);\n    setSucceeded(true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(CardElement, {\n      id: \"card-element\",\n      options: cardStyle,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: processing || disabled || succeeded,\n      id: \"submit\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"button-text\",\n        children: processing ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\",\n          id: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 23\n        }, this) : \"Pay now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-error\",\n      role: \"alert\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: succeeded ? \"result-message\" : \"result-message hidden\",\n      children: [\"Payment succeeded, see the result in your\", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `https://dashboard.stripe.com/test/payments`,\n        children: [\" \", \"Stripe dashboard.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }, this), \" \", \"Refresh the page to pay again.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 3\n  }, this);\n};","map":{"version":3,"sources":["/Users/dtzr/Documents/GitHub/ecommerce-web/src/components/Checkout(Stripe)/Checkout.js"],"names":["succeeded","setSucceeded","useState","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","stripe","useStripe","elements","useElements","useEffect","window","fetch","method","headers","body","JSON","stringify","items","id","then","res","json","data","cardStyle","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","handleChange","event","empty","message","handleSubmit","ev","preventDefault","payload","confirmCardPayment","payment_method","card","getElement","CardElement"],"mappings":"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","sourcesContent":["const [succeeded, setSucceeded] = useState(false);\nconst [error, setError] = useState(null);\nconst [processing, setProcessing] = useState(\"\");\nconst [disabled, setDisabled] = useState(true);\nconst [clientSecret, setClientSecret] = useState(\"\");\nconst stripe = useStripe();\nconst elements = useElements();\n\nuseEffect(() => {\n  // Create PaymentIntent as soon as the page loads\n  window\n    .fetch(\"/create-payment-intent\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ items: [{ id: \"xl-tshirt\" }] }),\n    })\n    .then((res) => {\n      return res.json();\n    })\n    .then((data) => {\n      setClientSecret(data.clientSecret);\n    });\n}, []);\n\nconst cardStyle = {\n  style: {\n    base: {\n      color: \"#32325d\",\n      fontFamily: \"Arial, sans-serif\",\n      fontSmoothing: \"antialiased\",\n      fontSize: \"16px\",\n      \"::placeholder\": {\n        color: \"#32325d\",\n      },\n    },\n    invalid: {\n      color: \"#fa755a\",\n      iconColor: \"#fa755a\",\n    },\n  },\n};\n\nconst handleChange = async (event) => {\n  // Listen for changes in the CardElement\n  // and display any errors as the customer types their card details\n  setDisabled(event.empty);\n  setError(event.error ? event.error.message : \"\");\n};\n\nconst handleSubmit = async (ev) => {\n  ev.preventDefault();\n  setProcessing(true);\n  const payload = await stripe.confirmCardPayment(clientSecret, {\n    payment_method: {\n      card: elements.getElement(CardElement),\n    },\n  });\n  if (payload.error) {\n    setError(`Payment failed ${payload.error.message}`);\n    setProcessing(false);\n  } else {\n    setError(null);\n    setProcessing(false);\n    setSucceeded(true);\n  }\n\nreturn (\n  <form id=\"payment-form\" onSubmit={handleSubmit}>\n    <CardElement\n      id=\"card-element\"\n      options={cardStyle}\n      onChange={handleChange}\n    />\n    <button disabled={processing || disabled || succeeded} id=\"submit\">\n      <span id=\"button-text\">\n        {processing ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay now\"}\n      </span>\n    </button>\n    {/* Show any error that happens when processing the payment */}\n    {error && (\n      <div className=\"card-error\" role=\"alert\">\n        {error}\n      </div>\n    )}\n    {/* Show a success message upon completion */}\n    <p className={succeeded ? \"result-message\" : \"result-message hidden\"}>\n      Payment succeeded, see the result in your\n      <a href={`https://dashboard.stripe.com/test/payments`}>\n        {\" \"}\n        Stripe dashboard.\n      </a>{\" \"}\n      Refresh the page to pay again.\n    </p>\n  </form>\n);\n}\n"]},"metadata":{},"sourceType":"module"}