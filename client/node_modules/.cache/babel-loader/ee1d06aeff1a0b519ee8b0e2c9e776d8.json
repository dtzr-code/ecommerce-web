{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  items: []\n};\nexport const cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart: (state, action) => {\n      //must spread the state.items like 'copying' the intiial state of the items and adding on to it\n      //the payload contains the item that we want to add\n      const index = state.items.find(cartItem => cartItem.id === action.payload.id);\n\n      if (index) {\n        tate.items[index].quantity -= 1;\n      }\n\n      state.items.push({ ...action.payload,\n        quantity: 1\n      });\n    },\n    increaseQty: (state, action) => {\n      const index = state.items.findIndex(cartItem => cartItem.id === action.payload.id);\n      state.items[index].quantity += 1;\n    },\n    decreaseQty: (state, action) => {\n      const index = state.items.findIndex(cartItem => cartItem.id === action.payload.id);\n\n      if (state.items[index].quantity > 1) {\n        state.items[index].quantity -= 1;\n      } else {\n        alert('Minimum quanitity is 1. Remove item instead.');\n      }\n    },\n    removeFromCart: (state, action) => {\n      const index = state.items.findIndex(cartItem => cartItem.id === action.payload.id);\n      let newCart = [...state.items];\n\n      if (index >= 0) {\n        //If the item exists in the basket remove it\n        newCart.splice(index, 1);\n      } else {\n        console.warn(`Can't remove from product (id:${action.payload.id}) as its not found in the cart`);\n      }\n\n      state.items = newCart;\n    },\n    clearCart: state => {\n      state.items = [];\n    }\n  }\n});\nexport const {\n  addToCart,\n  removeFromCart,\n  clearCart,\n  increaseQty,\n  decreaseQty\n} = cartSlice.actions;\nexport const selectItems = state => state.cart.items;\nexport const selectTotal = state => state.cart.items.reduce((total, item) => total + item.price * item.quantity, 0);\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/Users/dtzr/Documents/GitHub/ecommerce-web/client/src/slices/cartSlice.js"],"names":["createSlice","initialState","items","cartSlice","name","reducers","addToCart","state","action","index","find","cartItem","id","payload","tate","quantity","push","increaseQty","findIndex","decreaseQty","alert","removeFromCart","newCart","splice","console","warn","clearCart","actions","selectItems","cart","selectTotal","reduce","total","item","price","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  items: [],\n};\n\nexport const cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart: (state, action) => {\n      //must spread the state.items like 'copying' the intiial state of the items and adding on to it\n      //the payload contains the item that we want to add\n      const index = state.items.find(\n        (cartItem) => cartItem.id === action.payload.id\n      );\n      if (index) {\n        tate.items[index].quantity -= 1\n      }\n      state.items.push({\n        ...action.payload,\n        quantity: 1,\n      });\n    },\n\n    increaseQty: (state, action) => {\n      const index = state.items.findIndex(\n        (cartItem) => cartItem.id === action.payload.id\n      );\n      state.items[index].quantity += 1;\n    },\n\n    decreaseQty: (state, action) => {\n      const index = state.items.findIndex(\n        (cartItem) => cartItem.id === action.payload.id\n      );\n      if (state.items[index].quantity > 1) {\n        state.items[index].quantity -= 1;\n      } else {\n        alert('Minimum quanitity is 1. Remove item instead.')\n      }\n    },\n\n    removeFromCart: (state, action) => {\n      const index = state.items.findIndex(\n        (cartItem) => cartItem.id === action.payload.id\n      );\n\n      let newCart = [...state.items];\n\n      if (index >= 0) {\n        //If the item exists in the basket remove it\n        newCart.splice(index, 1);\n      } else {\n        console.warn(\n          `Can't remove from product (id:${action.payload.id}) as its not found in the cart`\n        );\n      }\n\n      state.items = newCart;\n    },\n\n    clearCart: (state) => {\n      state.items = [];\n    },\n  },\n});\n\nexport const { addToCart, removeFromCart, clearCart, increaseQty, decreaseQty } =\n  cartSlice.actions;\n\nexport const selectItems = (state) => state.cart.items;\nexport const selectTotal = (state) =>\n  state.cart.items.reduce((total, item) => total + (item.price * item.quantity), 0);\n\nexport default cartSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}