{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  items: []\n};\nexport const cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart: (state, action) => {\n      //must spread the state.items like 'copying' the intiial state of the items and adding on to it\n      //the payload contains the item that we want to add\n      state.items.push({ ...action.payload,\n        quantity: 1\n      });\n    },\n    increaseQty: (state, action) => {},\n    removeFromCart: (state, action) => {\n      const index = state.items.findIndex(cartItem => cartItem.id === action.payload.id);\n      let newCart = [...state.items];\n\n      if (index >= 0) {\n        //If the item exists in the basket remove it\n        newCart.splice(index, 1);\n      } else {\n        console.warn(`Can't remove from product (id:${action.payload.id}) as its not found in the cart`);\n      }\n\n      state.items = newCart;\n    },\n    clearCart: state => {\n      state.items = [];\n    }\n  }\n});\nexport const {\n  addToCart,\n  removeFromCart,\n  clearCart\n} = cartSlice.actions;\nexport const selectItems = state => state.cart.items;\nexport const selectTotal = state => state.cart.items.reduce((total, item) => total + item.price, 0);\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/Users/dtzr/Documents/GitHub/ecommerce-web/client/src/slices/cartSlice.js"],"names":["createSlice","initialState","items","cartSlice","name","reducers","addToCart","state","action","push","payload","quantity","increaseQty","removeFromCart","index","findIndex","cartItem","id","newCart","splice","console","warn","clearCart","actions","selectItems","cart","selectTotal","reduce","total","item","price","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE;AADY,CAArB;AAIA,OAAO,MAAMC,SAAS,GAAGH,WAAW,CAAC;AACnCI,EAAAA,IAAI,EAAE,MAD6B;AAEnCH,EAAAA,YAFmC;AAGnCI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC5B;AACA;AACAD,MAAAA,KAAK,CAACL,KAAN,CAAYO,IAAZ,CAAiB,EACf,GAAGD,MAAM,CAACE,OADK;AAEfC,QAAAA,QAAQ,EAAE;AAFK,OAAjB;AAID,KARO;AAURC,IAAAA,WAAW,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAmB,CAE/B,CAZO;AAcRK,IAAAA,cAAc,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AACjC,YAAMM,KAAK,GAAGP,KAAK,CAACL,KAAN,CAAYa,SAAZ,CACXC,QAAD,IAAcA,QAAQ,CAACC,EAAT,KAAgBT,MAAM,CAACE,OAAP,CAAeO,EADjC,CAAd;AAIA,UAAIC,OAAO,GAAG,CAAC,GAAGX,KAAK,CAACL,KAAV,CAAd;;AAEA,UAAIY,KAAK,IAAI,CAAb,EAAgB;AACd;AACAI,QAAAA,OAAO,CAACC,MAAR,CAAeL,KAAf,EAAsB,CAAtB;AACD,OAHD,MAGO;AACLM,QAAAA,OAAO,CAACC,IAAR,CACG,iCAAgCb,MAAM,CAACE,OAAP,CAAeO,EAAG,gCADrD;AAGD;;AAEDV,MAAAA,KAAK,CAACL,KAAN,GAAcgB,OAAd;AACD,KA/BO;AAiCRI,IAAAA,SAAS,EAAGf,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACL,KAAN,GAAc,EAAd;AACD;AAnCO;AAHyB,CAAD,CAA7B;AA0CP,OAAO,MAAM;AAAEI,EAAAA,SAAF;AAAaO,EAAAA,cAAb;AAA6BS,EAAAA;AAA7B,IAA2CnB,SAAS,CAACoB,OAA3D;AAEP,OAAO,MAAMC,WAAW,GAAIjB,KAAD,IAAWA,KAAK,CAACkB,IAAN,CAAWvB,KAA1C;AACP,OAAO,MAAMwB,WAAW,GAAInB,KAAD,IACzBA,KAAK,CAACkB,IAAN,CAAWvB,KAAX,CAAiByB,MAAjB,CAAwB,CAACC,KAAD,EAAQC,IAAR,KAAiBD,KAAK,GAAGC,IAAI,CAACC,KAAtD,EAA6D,CAA7D,CADK;AAGP,eAAe3B,SAAS,CAAC4B,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  items: [],\n};\n\nexport const cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart: (state, action) => {\n      //must spread the state.items like 'copying' the intiial state of the items and adding on to it\n      //the payload contains the item that we want to add\n      state.items.push({\n        ...action.payload,\n        quantity: 1\n      })\n    },\n\n    increaseQty: (state, action) => {\n      \n    },\n\n    removeFromCart: (state, action) => {\n      const index = state.items.findIndex(\n        (cartItem) => cartItem.id === action.payload.id\n      );\n\n      let newCart = [...state.items];\n\n      if (index >= 0) {\n        //If the item exists in the basket remove it\n        newCart.splice(index, 1);\n      } else {\n        console.warn(\n          `Can't remove from product (id:${action.payload.id}) as its not found in the cart`\n        );\n      }\n\n      state.items = newCart;\n    },\n\n    clearCart: (state) => {\n      state.items = []\n    }\n  },\n});\n\nexport const { addToCart, removeFromCart, clearCart } = cartSlice.actions;\n\nexport const selectItems = (state) => state.cart.items;\nexport const selectTotal = (state) =>\n  state.cart.items.reduce((total, item) => total + item.price, 0);\n\nexport default cartSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}